// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package com.myessay.web;

import com.myessay.model.Subject;
import com.myessay.model.SubjectRepository;
import com.myessay.web.SubjectController;
import java.io.UnsupportedEncodingException;
import javax.servlet.http.HttpServletRequest;
import javax.validation.Valid;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.ui.Model;
import org.springframework.validation.BindingResult;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.util.UriUtils;
import org.springframework.web.util.WebUtils;

privileged aspect SubjectController_Roo_Controller {
    
    @Autowired
    SubjectRepository SubjectController.subjectRepository;
    
    @RequestMapping(method = RequestMethod.POST, produces = "text/html")
    public String SubjectController.create(@Valid Subject subject, BindingResult bindingResult, Model uiModel, HttpServletRequest httpServletRequest) {
        if (bindingResult.hasErrors()) {
            populateEditForm(uiModel, subject);
            return "subjects/create";
        }
        uiModel.asMap().clear();
        subjectRepository.save(subject);
        return "redirect:/subjects/" + encodeUrlPathSegment(subject.getId().toString(), httpServletRequest);
    }
    
    @RequestMapping(params = "form", produces = "text/html")
    public String SubjectController.createForm(Model uiModel) {
        populateEditForm(uiModel, new Subject());
        return "subjects/create";
    }
    
    @RequestMapping(value = "/{id}", produces = "text/html")
    public String SubjectController.show(@PathVariable("id") Integer id, Model uiModel) {
        uiModel.addAttribute("subject", subjectRepository.findOne(id));
        uiModel.addAttribute("itemId", id);
        return "subjects/show";
    }
    
    @RequestMapping(produces = "text/html")
    public String SubjectController.list(@RequestParam(value = "page", required = false) Integer page, @RequestParam(value = "size", required = false) Integer size, @RequestParam(value = "sortFieldName", required = false) String sortFieldName, @RequestParam(value = "sortOrder", required = false) String sortOrder, Model uiModel) {
        if (page != null || size != null) {
            int sizeNo = size == null ? 10 : size.intValue();
            final int firstResult = page == null ? 0 : (page.intValue() - 1) * sizeNo;
            uiModel.addAttribute("subjects", subjectRepository.findAll(new org.springframework.data.domain.PageRequest(firstResult / sizeNo, sizeNo)).getContent());
            float nrOfPages = (float) subjectRepository.count() / sizeNo;
            uiModel.addAttribute("maxPages", (int) ((nrOfPages > (int) nrOfPages || nrOfPages == 0.0) ? nrOfPages + 1 : nrOfPages));
        } else {
            uiModel.addAttribute("subjects", subjectRepository.findAll());
        }
        return "subjects/list";
    }
    
    @RequestMapping(method = RequestMethod.PUT, produces = "text/html")
    public String SubjectController.update(@Valid Subject subject, BindingResult bindingResult, Model uiModel, HttpServletRequest httpServletRequest) {
        if (bindingResult.hasErrors()) {
            populateEditForm(uiModel, subject);
            return "subjects/update";
        }
        uiModel.asMap().clear();
        subjectRepository.save(subject);
        return "redirect:/subjects/" + encodeUrlPathSegment(subject.getId().toString(), httpServletRequest);
    }
    
    @RequestMapping(value = "/{id}", params = "form", produces = "text/html")
    public String SubjectController.updateForm(@PathVariable("id") Integer id, Model uiModel) {
        populateEditForm(uiModel, subjectRepository.findOne(id));
        return "subjects/update";
    }
    
    @RequestMapping(value = "/{id}", method = RequestMethod.DELETE, produces = "text/html")
    public String SubjectController.delete(@PathVariable("id") Integer id, @RequestParam(value = "page", required = false) Integer page, @RequestParam(value = "size", required = false) Integer size, Model uiModel) {
        Subject subject = subjectRepository.findOne(id);
        subjectRepository.delete(subject);
        uiModel.asMap().clear();
        uiModel.addAttribute("page", (page == null) ? "1" : page.toString());
        uiModel.addAttribute("size", (size == null) ? "10" : size.toString());
        return "redirect:/subjects";
    }
    
    void SubjectController.populateEditForm(Model uiModel, Subject subject) {
        uiModel.addAttribute("subject", subject);
    }
    
    String SubjectController.encodeUrlPathSegment(String pathSegment, HttpServletRequest httpServletRequest) {
        String enc = httpServletRequest.getCharacterEncoding();
        if (enc == null) {
            enc = WebUtils.DEFAULT_CHARACTER_ENCODING;
        }
        try {
            pathSegment = UriUtils.encodePathSegment(pathSegment, enc);
        } catch (UnsupportedEncodingException uee) {}
        return pathSegment;
    }
    
}
