// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package com.myessay.model;

import com.myessay.model.Userinfo;
import com.myessay.model.UserinfoDataOnDemand;
import com.myessay.model.UserinfoRepository;
import java.security.SecureRandom;
import java.util.ArrayList;
import java.util.Calendar;
import java.util.GregorianCalendar;
import java.util.Iterator;
import java.util.List;
import java.util.Random;
import javax.validation.ConstraintViolation;
import javax.validation.ConstraintViolationException;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Component;

privileged aspect UserinfoDataOnDemand_Roo_DataOnDemand {
    
    declare @type: UserinfoDataOnDemand: @Component;
    
    private Random UserinfoDataOnDemand.rnd = new SecureRandom();
    
    private List<Userinfo> UserinfoDataOnDemand.data;
    
    @Autowired
    UserinfoRepository UserinfoDataOnDemand.userinfoRepository;
    
    public Userinfo UserinfoDataOnDemand.getNewTransientUserinfo(int index) {
        Userinfo obj = new Userinfo();
        setCity(obj, index);
        setContactId(obj, index);
        setContactType(obj, index);
        setCountry(obj, index);
        setCreateBy(obj, index);
        setCreateDate(obj, index);
        setEmail(obj, index);
        setEmailCode(obj, index);
        setFirstName(obj, index);
        setGroupName(obj, index);
        setHasVerified(obj, index);
        setLastName(obj, index);
        setLoginPassword(obj, index);
        setPasswordNonExpired(obj, index);
        setSpecial(obj, index);
        return obj;
    }
    
    public void UserinfoDataOnDemand.setCity(Userinfo obj, int index) {
        String city = "city_" + index;
        if (city.length() > 35) {
            city = city.substring(0, 35);
        }
        obj.setCity(city);
    }
    
    public void UserinfoDataOnDemand.setContactId(Userinfo obj, int index) {
        String contactId = "contactId_" + index;
        if (contactId.length() > 35) {
            contactId = contactId.substring(0, 35);
        }
        obj.setContactId(contactId);
    }
    
    public void UserinfoDataOnDemand.setContactType(Userinfo obj, int index) {
        String contactType = "contactType_" + index;
        if (contactType.length() > 20) {
            contactType = contactType.substring(0, 20);
        }
        obj.setContactType(contactType);
    }
    
    public void UserinfoDataOnDemand.setCountry(Userinfo obj, int index) {
        String country = "country_" + index;
        if (country.length() > 50) {
            country = country.substring(0, 50);
        }
        obj.setCountry(country);
    }
    
    public void UserinfoDataOnDemand.setCreateBy(Userinfo obj, int index) {
        Integer createBy = new Integer(index);
        obj.setCreateBy(createBy);
    }
    
    public void UserinfoDataOnDemand.setCreateDate(Userinfo obj, int index) {
        Calendar createDate = Calendar.getInstance();
        obj.setCreateDate(createDate);
    }
    
    public void UserinfoDataOnDemand.setEmail(Userinfo obj, int index) {
        String email = "foo" + index + "@bar.com";
        if (email.length() > 65) {
            email = email.substring(0, 65);
        }
        obj.setEmail(email);
    }
    
    public void UserinfoDataOnDemand.setEmailCode(Userinfo obj, int index) {
        String emailCode = "foo" + index + "@bar.com";
        if (emailCode.length() > 50) {
            emailCode = emailCode.substring(0, 50);
        }
        obj.setEmailCode(emailCode);
    }
    
    public void UserinfoDataOnDemand.setFirstName(Userinfo obj, int index) {
        String firstName = "firstName_" + index;
        if (firstName.length() > 70) {
            firstName = firstName.substring(0, 70);
        }
        obj.setFirstName(firstName);
    }
    
    public void UserinfoDataOnDemand.setGroupName(Userinfo obj, int index) {
        String groupName = "groupName_" + index;
        if (groupName.length() > 255) {
            groupName = groupName.substring(0, 255);
        }
        obj.setGroupName(groupName);
    }
    
    public void UserinfoDataOnDemand.setHasVerified(Userinfo obj, int index) {
        Boolean hasVerified = Boolean.TRUE;
        obj.setHasVerified(hasVerified);
    }
    
    public void UserinfoDataOnDemand.setLastName(Userinfo obj, int index) {
        String lastName = "lastName_" + index;
        if (lastName.length() > 70) {
            lastName = lastName.substring(0, 70);
        }
        obj.setLastName(lastName);
    }
    
    public void UserinfoDataOnDemand.setLoginPassword(Userinfo obj, int index) {
        String loginPassword = "loginPassword_" + index;
        if (loginPassword.length() > 50) {
            loginPassword = loginPassword.substring(0, 50);
        }
        obj.setLoginPassword(loginPassword);
    }
    
    public void UserinfoDataOnDemand.setPasswordNonExpired(Userinfo obj, int index) {
        Boolean passwordNonExpired = Boolean.TRUE;
        obj.setPasswordNonExpired(passwordNonExpired);
    }
    
    public void UserinfoDataOnDemand.setSpecial(Userinfo obj, int index) {
        String special = "special_" + index;
        if (special.length() > 255) {
            special = special.substring(0, 255);
        }
        obj.setSpecial(special);
    }
    
    public Userinfo UserinfoDataOnDemand.getSpecificUserinfo(int index) {
        init();
        if (index < 0) {
            index = 0;
        }
        if (index > (data.size() - 1)) {
            index = data.size() - 1;
        }
        Userinfo obj = data.get(index);
        Integer id = obj.getId();
        return userinfoRepository.findOne(id);
    }
    
    public Userinfo UserinfoDataOnDemand.getRandomUserinfo() {
        init();
        Userinfo obj = data.get(rnd.nextInt(data.size()));
        Integer id = obj.getId();
        return userinfoRepository.findOne(id);
    }
    
    public boolean UserinfoDataOnDemand.modifyUserinfo(Userinfo obj) {
        return false;
    }
    
    public void UserinfoDataOnDemand.init() {
        int from = 0;
        int to = 10;
        data = userinfoRepository.findAll(new org.springframework.data.domain.PageRequest(from / to, to)).getContent();
        if (data == null) {
            throw new IllegalStateException("Find entries implementation for 'Userinfo' illegally returned null");
        }
        if (!data.isEmpty()) {
            return;
        }
        
        data = new ArrayList<Userinfo>();
        for (int i = 0; i < 10; i++) {
            Userinfo obj = getNewTransientUserinfo(i);
            try {
                userinfoRepository.save(obj);
            } catch (final ConstraintViolationException e) {
                final StringBuilder msg = new StringBuilder();
                for (Iterator<ConstraintViolation<?>> iter = e.getConstraintViolations().iterator(); iter.hasNext();) {
                    final ConstraintViolation<?> cv = iter.next();
                    msg.append("[").append(cv.getRootBean().getClass().getName()).append(".").append(cv.getPropertyPath()).append(": ").append(cv.getMessage()).append(" (invalid value = ").append(cv.getInvalidValue()).append(")").append("]");
                }
                throw new IllegalStateException(msg.toString(), e);
            }
            userinfoRepository.flush();
            data.add(obj);
        }
    }
    
}
