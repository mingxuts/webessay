// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package com.myessay.model;

import com.myessay.model.Uploadfile;
import com.myessay.model.UploadfileDataOnDemand;
import com.myessay.model.UploadfileRepository;
import java.security.SecureRandom;
import java.util.ArrayList;
import java.util.Iterator;
import java.util.List;
import java.util.Random;
import javax.validation.ConstraintViolation;
import javax.validation.ConstraintViolationException;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Component;

privileged aspect UploadfileDataOnDemand_Roo_DataOnDemand {
    
    declare @type: UploadfileDataOnDemand: @Component;
    
    private Random UploadfileDataOnDemand.rnd = new SecureRandom();
    
    private List<Uploadfile> UploadfileDataOnDemand.data;
    
    @Autowired
    UploadfileRepository UploadfileDataOnDemand.uploadfileRepository;
    
    public Uploadfile UploadfileDataOnDemand.getNewTransientUploadfile(int index) {
        Uploadfile obj = new Uploadfile();
        setFile(obj, index);
        setFileContentType(obj, index);
        setFileName(obj, index);
        setFileSize(obj, index);
        return obj;
    }
    
    public void UploadfileDataOnDemand.setFile(Uploadfile obj, int index) {
        byte[] file = String.valueOf(index).getBytes();
        obj.setFile(file);
    }
    
    public void UploadfileDataOnDemand.setFileContentType(Uploadfile obj, int index) {
        String fileContentType = "fileContentType_" + index;
        if (fileContentType.length() > 100) {
            fileContentType = fileContentType.substring(0, 100);
        }
        obj.setFileContentType(fileContentType);
    }
    
    public void UploadfileDataOnDemand.setFileName(Uploadfile obj, int index) {
        String fileName = "fileName_" + index;
        if (fileName.length() > 200) {
            fileName = fileName.substring(0, 200);
        }
        obj.setFileName(fileName);
    }
    
    public void UploadfileDataOnDemand.setFileSize(Uploadfile obj, int index) {
        Long fileSize = new Integer(index).longValue();
        obj.setFileSize(fileSize);
    }
    
    public Uploadfile UploadfileDataOnDemand.getSpecificUploadfile(int index) {
        init();
        if (index < 0) {
            index = 0;
        }
        if (index > (data.size() - 1)) {
            index = data.size() - 1;
        }
        Uploadfile obj = data.get(index);
        Integer id = obj.getId();
        return uploadfileRepository.findOne(id);
    }
    
    public Uploadfile UploadfileDataOnDemand.getRandomUploadfile() {
        init();
        Uploadfile obj = data.get(rnd.nextInt(data.size()));
        Integer id = obj.getId();
        return uploadfileRepository.findOne(id);
    }
    
    public boolean UploadfileDataOnDemand.modifyUploadfile(Uploadfile obj) {
        return false;
    }
    
    public void UploadfileDataOnDemand.init() {
        int from = 0;
        int to = 10;
        data = uploadfileRepository.findAll(new org.springframework.data.domain.PageRequest(from / to, to)).getContent();
        if (data == null) {
            throw new IllegalStateException("Find entries implementation for 'Uploadfile' illegally returned null");
        }
        if (!data.isEmpty()) {
            return;
        }
        
        data = new ArrayList<Uploadfile>();
        for (int i = 0; i < 10; i++) {
            Uploadfile obj = getNewTransientUploadfile(i);
            try {
                uploadfileRepository.save(obj);
            } catch (final ConstraintViolationException e) {
                final StringBuilder msg = new StringBuilder();
                for (Iterator<ConstraintViolation<?>> iter = e.getConstraintViolations().iterator(); iter.hasNext();) {
                    final ConstraintViolation<?> cv = iter.next();
                    msg.append("[").append(cv.getRootBean().getClass().getName()).append(".").append(cv.getPropertyPath()).append(": ").append(cv.getMessage()).append(" (invalid value = ").append(cv.getInvalidValue()).append(")").append("]");
                }
                throw new IllegalStateException(msg.toString(), e);
            }
            uploadfileRepository.flush();
            data.add(obj);
        }
    }
    
}
