// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package com.myessay.model;

import com.myessay.model.Job;
import com.myessay.model.JobDataOnDemand;
import com.myessay.model.JobRepository;
import com.myessay.model.UserinfoDataOnDemand;
import java.math.BigDecimal;
import java.security.SecureRandom;
import java.util.ArrayList;
import java.util.Calendar;
import java.util.GregorianCalendar;
import java.util.Iterator;
import java.util.List;
import java.util.Random;
import javax.validation.ConstraintViolation;
import javax.validation.ConstraintViolationException;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Component;

privileged aspect JobDataOnDemand_Roo_DataOnDemand {
    
    declare @type: JobDataOnDemand: @Component;
    
    private Random JobDataOnDemand.rnd = new SecureRandom();
    
    private List<Job> JobDataOnDemand.data;
    
    @Autowired
    UserinfoDataOnDemand JobDataOnDemand.userinfoDataOnDemand;
    
    @Autowired
    JobRepository JobDataOnDemand.jobRepository;
    
    public Job JobDataOnDemand.getNewTransientJob(int index) {
        Job obj = new Job();
        setAllowAllSubject(obj, index);
        setAmountDue(obj, index);
        setChargeWriter(obj, index);
        setCommission(obj, index);
        setCoupon(obj, index);
        setCourseLevel(obj, index);
        setCreateDate(obj, index);
        setDeadLine(obj, index);
        setFeedBack(obj, index);
        setFeedBackDescription(obj, index);
        setFileId(obj, index);
        setFormat(obj, index);
        setFullPrice(obj, index);
        setIncludeFigure(obj, index);
        setNote(obj, index);
        setOrderId(obj, index);
        setReduced(obj, index);
        setReferencing(obj, index);
        setSourcesCount(obj, index);
        setStartDate(obj, index);
        setStatus(obj, index);
        setSubjectId(obj, index);
        setWordCount(obj, index);
        return obj;
    }
    
    public void JobDataOnDemand.setAllowAllSubject(Job obj, int index) {
        Boolean allowAllSubject = Boolean.TRUE;
        obj.setAllowAllSubject(allowAllSubject);
    }
    
    public void JobDataOnDemand.setAmountDue(Job obj, int index) {
        BigDecimal amountDue = BigDecimal.valueOf(index);
        if (amountDue.compareTo(new BigDecimal("999999.99")) == 1) {
            amountDue = new BigDecimal("999999.99");
        }
        obj.setAmountDue(amountDue);
    }
    
    public void JobDataOnDemand.setChargeWriter(Job obj, int index) {
        BigDecimal chargeWriter = BigDecimal.valueOf(index);
        if (chargeWriter.compareTo(new BigDecimal("999999.99")) == 1) {
            chargeWriter = new BigDecimal("999999.99");
        }
        obj.setChargeWriter(chargeWriter);
    }
    
    public void JobDataOnDemand.setCommission(Job obj, int index) {
        BigDecimal commission = BigDecimal.valueOf(index);
        if (commission.compareTo(new BigDecimal("999999.99")) == 1) {
            commission = new BigDecimal("999999.99");
        }
        obj.setCommission(commission);
    }
    
    public void JobDataOnDemand.setCoupon(Job obj, int index) {
        String coupon = "coupon_" + index;
        if (coupon.length() > 35) {
            coupon = coupon.substring(0, 35);
        }
        obj.setCoupon(coupon);
    }
    
    public void JobDataOnDemand.setCourseLevel(Job obj, int index) {
        String courseLevel = "courseLe_" + index;
        if (courseLevel.length() > 10) {
            courseLevel = courseLevel.substring(0, 10);
        }
        obj.setCourseLevel(courseLevel);
    }
    
    public void JobDataOnDemand.setCreateDate(Job obj, int index) {
        Calendar createDate = Calendar.getInstance();
        obj.setCreateDate(createDate);
    }
    
    public void JobDataOnDemand.setDeadLine(Job obj, int index) {
        Calendar deadLine = Calendar.getInstance();
        obj.setDeadLine(deadLine);
    }
    
    public void JobDataOnDemand.setFeedBack(Job obj, int index) {
        String feedBack = "f" + index;
        if (feedBack.length() > 2) {
            feedBack = feedBack.substring(0, 2);
        }
        obj.setFeedBack(feedBack);
    }
    
    public void JobDataOnDemand.setFeedBackDescription(Job obj, int index) {
        String feedBackDescription = "feedBackDescription_" + index;
        if (feedBackDescription.length() > 255) {
            feedBackDescription = feedBackDescription.substring(0, 255);
        }
        obj.setFeedBackDescription(feedBackDescription);
    }
    
    public void JobDataOnDemand.setFileId(Job obj, int index) {
        Integer fileId = new Integer(index);
        obj.setFileId(fileId);
    }
    
    public void JobDataOnDemand.setFormat(Job obj, int index) {
        String format = "format_" + index;
        if (format.length() > 30) {
            format = format.substring(0, 30);
        }
        obj.setFormat(format);
    }
    
    public void JobDataOnDemand.setFullPrice(Job obj, int index) {
        BigDecimal fullPrice = BigDecimal.valueOf(index);
        if (fullPrice.compareTo(new BigDecimal("999999.99")) == 1) {
            fullPrice = new BigDecimal("999999.99");
        }
        obj.setFullPrice(fullPrice);
    }
    
    public void JobDataOnDemand.setIncludeFigure(Job obj, int index) {
        String includeFigure = "includeFigure_" + index;
        if (includeFigure.length() > 30) {
            includeFigure = includeFigure.substring(0, 30);
        }
        obj.setIncludeFigure(includeFigure);
    }
    
    public void JobDataOnDemand.setNote(Job obj, int index) {
        String note = "note_" + index;
        if (note.length() > 255) {
            note = note.substring(0, 255);
        }
        obj.setNote(note);
    }
    
    public void JobDataOnDemand.setOrderId(Job obj, int index) {
        Integer orderId = new Integer(index);
        obj.setOrderId(orderId);
    }
    
    public void JobDataOnDemand.setReduced(Job obj, int index) {
        BigDecimal reduced = BigDecimal.valueOf(index);
        if (reduced.compareTo(new BigDecimal("999999.99")) == 1) {
            reduced = new BigDecimal("999999.99");
        }
        obj.setReduced(reduced);
    }
    
    public void JobDataOnDemand.setReferencing(Job obj, int index) {
        String referencing = "referencing_" + index;
        if (referencing.length() > 30) {
            referencing = referencing.substring(0, 30);
        }
        obj.setReferencing(referencing);
    }
    
    public void JobDataOnDemand.setSourcesCount(Job obj, int index) {
        Short sourcesCount = new Integer(index).shortValue();
        obj.setSourcesCount(sourcesCount);
    }
    
    public void JobDataOnDemand.setStartDate(Job obj, int index) {
        Calendar startDate = Calendar.getInstance();
        obj.setStartDate(startDate);
    }
    
    public void JobDataOnDemand.setStatus(Job obj, int index) {
        String status = "status_" + index;
        if (status.length() > 88) {
            status = status.substring(0, 88);
        }
        obj.setStatus(status);
    }
    
    public void JobDataOnDemand.setSubjectId(Job obj, int index) {
        Integer subjectId = new Integer(index);
        obj.setSubjectId(subjectId);
    }
    
    public void JobDataOnDemand.setWordCount(Job obj, int index) {
        Integer wordCount = new Integer(index);
        obj.setWordCount(wordCount);
    }
    
    public Job JobDataOnDemand.getSpecificJob(int index) {
        init();
        if (index < 0) {
            index = 0;
        }
        if (index > (data.size() - 1)) {
            index = data.size() - 1;
        }
        Job obj = data.get(index);
        Integer id = obj.getId();
        return jobRepository.findOne(id);
    }
    
    public Job JobDataOnDemand.getRandomJob() {
        init();
        Job obj = data.get(rnd.nextInt(data.size()));
        Integer id = obj.getId();
        return jobRepository.findOne(id);
    }
    
    public boolean JobDataOnDemand.modifyJob(Job obj) {
        return false;
    }
    
    public void JobDataOnDemand.init() {
        int from = 0;
        int to = 10;
        data = jobRepository.findAll(new org.springframework.data.domain.PageRequest(from / to, to)).getContent();
        if (data == null) {
            throw new IllegalStateException("Find entries implementation for 'Job' illegally returned null");
        }
        if (!data.isEmpty()) {
            return;
        }
        
        data = new ArrayList<Job>();
        for (int i = 0; i < 10; i++) {
            Job obj = getNewTransientJob(i);
            try {
                jobRepository.save(obj);
            } catch (final ConstraintViolationException e) {
                final StringBuilder msg = new StringBuilder();
                for (Iterator<ConstraintViolation<?>> iter = e.getConstraintViolations().iterator(); iter.hasNext();) {
                    final ConstraintViolation<?> cv = iter.next();
                    msg.append("[").append(cv.getRootBean().getClass().getName()).append(".").append(cv.getPropertyPath()).append(": ").append(cv.getMessage()).append(" (invalid value = ").append(cv.getInvalidValue()).append(")").append("]");
                }
                throw new IllegalStateException(msg.toString(), e);
            }
            jobRepository.flush();
            data.add(obj);
        }
    }
    
}
